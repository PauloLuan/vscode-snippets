{
  "jest:afterAll": {
    "body": "afterAll(async () => {\n\t$0\n})",
    "description": "afterAll function is called once after all specs",
    "prefix": "aa"
  },
  "jest:afterEach": {
    "body": "afterEach(async () => {\n\t$0\n})",
    "description": "afterEach function is called once after each spec",
    "prefix": "ae"
  },
  "jest:beforeAll": {
    "body": "beforeAll(async () => {\n\t$0\n})",
    "description": "beforeAll function is called once before all specs",
    "prefix": "ba"
  },
  "jest:beforeEach": {
    "body": "beforeEach(async () => {\n\t$0\n})",
    "description": "beforeEach function is called once before each spec",
    "prefix": "be"
  },
  "jest:describe": {
    "body": "describe('${1:Name of the group}', async () => {\n\t$0\n})",
    "description": "creates a describe block",
    "prefix": "desc"
  },
  "jest:describe.each": {
    "body": [
      "describe.each([${1:[1, 2], [2, 4]}])(",
      "\t'${2:double(%d)}',",
      "\t(${3:input, expected}) => {",
      "\t\tit(`returns \\${expected}`, async () => {",
      "\t\t\t${4:expect(double(input)).toBe(expected)}",
      "\t\t})",
      "\t}",
      ")"
    ],
    "description": "creates a describe block with different test data sets",
    "prefix": "desce"
  },
  "jest:describe.only": {
    "body": "describe.only('${1:Name of the group}', async () => {\n\t$0\n})",
    "description": "creates a describe block that runs only",
    "prefix": "desco"
  },
  "jest:describe.skip": {
    "body": "describe.skip('${1:Name of the group}', async () => {\n\t$0\n})",
    "description": "creates a describe block that will be skipped",
    "prefix": "descs"
  },
  "jest:it": {
    "body": "it('${1:should }', async () => {\n\t$0\n})",
    "description": "creates an it block",
    "prefix": "it"
  },
  "jest:it.each": {
    "body": [
      "it.each([${1:[1, 2], [2, 4]}])(",
      "\t'${2:double(%d)}',",
      "\t(${3:input, expected}) => {",
      "\t\t${0:expect(double(input)).toBe(expected)}",
      "\t}",
      ")"
    ],
    "description": "creates an it block with different test data sets",
    "prefix": "ite"
  },
  "jest:it.only": {
    "body": "it.only('${1:should }', async () => {\n\t$0\n})",
    "description": "creates an it block that runs only",
    "prefix": "ito"
  },
  "jest:it.skip": {
    "body": "it.skip('${1:should }', async () => {\n\t$0\n})",
    "description": "creates an it block that will be skipped",
    "prefix": "its"
  },
  "jest:it.todo": {
    "body": "it.todo('${1:should }')",
    "description": "creates a test placeholder",
    "prefix": "itt"
  },
  "jest:it:async": {
    "body": "it('${1:should }', async () => {\n\t$0\n})",
    "description": "creates an it block with async callback function",
    "prefix": "ita"
  },
  "jest:template:cut": {
    "body": [
      "describe('${1:Name of the group}', () => {\n",
      "\tlet ${2:cut}\n",
      "\tbeforeEach(async () => {\n\t\t$2 = $3\n\t})\n",
      "\tafterEach(async () => {\n\t\t$2 = $3\n\t})\n",
      "\tit('${1:should }', async () => {",
      "\t\texpect($2).toBe($0)",
      "\t})\n",
      "})"
    ],
    "description": "creates a template to test a class under test",
    "prefix": "test"
  },
  "jest:toBe": {
    "body": "expect($1).toBe($0)",
    "description": "expects the first argument to be equal with the second one",
    "prefix": "tb"
  },
  "jest:toEqual": {
    "body": "expect($1).toEqual($0)",
    "description": "expects the first argument to be equal with the second one",
    "prefix": "te"
  },
  "jest:toHaveBeenCalled": {
    "body": "expect($1).toHaveBeenCalled()$0",
    "description": "returns true if the spy was called",
    "prefix": "thbc"
  },
  "js:anonymousFunction": {
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax",
    "prefix": "anfn"
  },
  "js:consoleAssert": {
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace",
    "prefix": "cas"
  },
  "js:consoleClear": {
    "body": "console.clear()",
    "description": "Clears the console",
    "prefix": "ccl"
  },
  "js:consoleCount": {
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label",
    "prefix": "cco"
  },
  "js:consoleDebug": {
    "body": "console.debug(${1:object})",
    "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari",
    "prefix": "cdb"
  },
  "js:consoleDir": {
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object",
    "prefix": "cdi"
  },
  "js:consoleError": {
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called",
    "prefix": "cer"
  },
  "js:consoleGroup": {
    "body": "console.group('${1:label}')",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
    "prefix": "cgr"
  },
  "js:consoleGroupEnd": {
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group().",
    "prefix": "cge"
  },
  "js:consoleInfo": {
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message",
    "prefix": "cin"
  },
  "js:consoleLogObject": {
    "body": [
      "==============",
      "console.log('${1:object} :>> ', ${1:object})",
      "=============="
    ],
    "description": "Displays an object in the console with its name",
    "prefix": ["console", "log"]
  },
  "js:consoleTable": {
    "body": "console.table(${1:object})",
    "description": "Displays tabular data as a table.",
    "prefix": "contab"
  },
  "js:consoleTime": {
    "body": "console.time(${1:object})",
    "description": "Sets starting point for execution time measurement",
    "prefix": "contime"
  },
  "js:consoleTimeEnd": {
    "body": "console.timeEnd(${1:object})",
    "description": "Sets end point for execution time measurement",
    "prefix": "contimeend"
  },
  "js:consoleTrace": {
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called",
    "prefix": "contra"
  },
  "js:consoleWarn": {
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
    "prefix": "conwar"
  },
  "js:constructor": {
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax",
    "prefix": "constructor"
  },
  "js:destructingArray": {
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing",
    "prefix": "destructingArray"
  },
  "js:destructingObject": {
    "body": "const {${2:propertyName}} = ${1:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing",
    "prefix": "destructingObject"
  },
  "js:exportClass": {
    "body": "export default class ${1:className} {\n\t$0\n}\n",
    "description": "Export default class in ES6 syntax",
    "prefix": "class"
  },
  "js:exportDefaultFunction": {
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n}\n",
    "description": "Export default function in ES6 syntax",
    "prefix": "exportdefault"
  },
  "js:exportNamedFunction": {
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}\n",
    "description": "Export named function in ES6 syntax",
    "prefix": "exportfun"
  },
  "js:exportNamedVariable": {
    "body": "export const ${1:exportVariable} = ${2:localVariable}\n",
    "description": "Export named variable in ES6 syntax",
    "prefix": "export"
  },
  "js:forEach": {
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})",
    "description": "Creates a forEach statement in ES6 syntax",
    "prefix": "forEach"
  },
  "js:forIn": {
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects",
    "prefix": "forin"
  },
  "js:forOf": {
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects",
    "prefix": "forof"
  },
  "js:importDestructing": {
    "body": "import { $2 } from '${1:module}'$0",
    "description": "Imports only a portion of the module in ES6 syntax",
    "prefix": "import"
  },
  "js:method": {
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Creates a method inside a class in ES6 syntax",
    "prefix": "met"
  },
  "js:moduleExports": {
    "body": "module.exports = {\n\t$0\n}\n",
    "description": "Module exports from Common JS, node syntax at ES6",
    "prefix": "mde"
  },
  "js:namedFunction": {
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax",
    "prefix": "func"
  },
  "js:promise": {
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n})",
    "description": "Creates and returns a new Promise in the standard ES6 syntax",
    "prefix": "promise"
  },
  "js:requireToConst": {
    "body": "const ${1:packageName} = require('${1:package}')$0",
    "description": "Require a package to const",
    "prefix": "require"
  },
  "js:setInterval": {
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})",
    "description": "Executes the given function at specified intervals in ES6 syntax",
    "prefix": "setInterval"
  },
  "js:setTimeOut": {
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})",
    "description": "Executes the given function after the specified delay in ES6 syntax",
    "prefix": "setTimeOut"
  },
  "js:thenCatch": {
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n})",
    "description": "Add the .then and .catch methods to handle promises",
    "prefix": ".then"
  }
}
